AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation Template to create SNS topic and SQS queues

Parameters:
  S3BucketParam:
    Type: String
    Default: factory-ci-cd
    Description: Factory bucket name
  S3FactoryDataSimulatorKeyParam:
    Type: String
    Default: applications/lambda/factory_data_simulator.zip
    Description: Factory key param
  S3FactoryDataSimulatorIteratorKeyParam:
    Type: String
    Default: applications/lambda/iterator.zip
    Description: Factory key param
  S3FactoryDataSimulatorIteratorStateMachineKeyParam:
    Type: String
    Default: applications/step_functions/iterator_state_machine.json
    Description: Factory key param
  RegionParam:
    Description: Region of the AWS resources
    Type: String
    Default: eu-central-1
  AccountIdParam:
    Description: AWS Account ID
    Type: String
    Default: 781648067507

Resources:
  FactoryDataSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: FactoryDataTopic
      FifoTopic: true
      ContentBasedDeduplication: true
    Description: SNS topic for factory data

  PressureSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: PressureSQSQueue
    Description: SQS queue for pressure data

  TemperatureSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TemperatureSQSQueue
    Description: SQS queue for temperature data

  PressureFactoryDataSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt PressureSQSQueue.Arn
      Protocol: sqs
      TopicArn: !Ref FactoryDataSNSTopic
    Description: Subscription for PressureSQSQueue to FactoryDataSNSTopic

  TemperatureFactoryDataSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt TemperatureSQSQueue.Arn
      Protocol: sqs
      TopicArn: !Ref FactoryDataSNSTopic
    Description: Subscription for TemperatureSQSQueue to FactoryDataSNSTopic

  PressureSQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PressureSQSQueue
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt PressureSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref FactoryDataSNSTopic

  TemperatureSQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TemperatureSQSQueue
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt TemperatureSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref FactoryDataSNSTopic

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: FactoryBasicLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${RegionParam}:${AccountIdParam}:*
              - Effect: Allow
                Action: logs:CreateLogStream
                Resource: !Sub arn:aws:logs:${RegionParam}:${AccountIdParam}:log-group:/aws/lambda/*
              - Effect: Allow
                Action: logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${RegionParam}:${AccountIdParam}:log-group:/aws/lambda/*
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref FactoryDataSNSTopic

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FactoryDataSimulator
      Code:
        S3Bucket: !Ref S3BucketParam
        S3Key: !Ref S3FactoryDataSimulatorKeyParam
      Handler: factory_sns_topic_data_simulator.lambda_handler
      Runtime: python3.8
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TOPIC_ARN: !Ref FactoryDataSNSTopic

  LambdaFunctionIterator:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FactoryDataSimulatorIterator
      Code:
        S3Bucket: !Ref S3BucketParam
        S3Key: !Ref S3FactoryDataSimulatorIteratorKeyParam
      Handler: iterator.lambda_handler
      Runtime: python3.8
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LAMBDA_TO_INVOKE: !Ref LambdaFunction

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StepFunctionBasicPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub ${LambdaFunctionIterator.Arn}
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub ${LambdaFunctionIterator.Arn}:*

  FactoryDataSimulatorStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionSubstitutions:
        IteratorLambdaFunction: !GetAtt LambdaFunctionIterator.Arn
      DefinitionS3Location:
        Bucket: !Ref S3BucketParam
        Key: !Ref S3FactoryDataSimulatorIteratorStateMachineKeyParam
      RoleArn: !GetAtt StepFunctionRole.Arn

  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FactoryDataSimulatorStepFunctionExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt FactoryDataSimulatorStepFunction.Arn

  ScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: StepFunctionScheduleRule
      Description: CloudWatch Events Rule to trigger Factory Data Simulator Step Function every minute
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt FactoryDataSimulatorStepFunction.Arn
          Id: FactoryDataSimulatorStepFunction
          RoleArn: !GetAtt StepFunctionExecutionRole.Arn
          Input: "{ \"input\": {} }"

Outputs:
  FactoryDataSNSTopic:
    Description: ARN of the created SNS Topic
    Value: !Ref FactoryDataSNSTopic

  PressureSQSQueueURL:
    Description: URL of the pressure SQS Queue
    Value: !Ref PressureSQSQueue

  TemperatureSQSQueueURL:
    Description: URL of the temperature SQS Queue
    Value: !Ref TemperatureSQSQueue
