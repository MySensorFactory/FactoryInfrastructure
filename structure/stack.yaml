AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template to create master and node for Kubernetes cluster
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  S3BucketParam:
    Type: String
    Default: factory-ci-cd
    Description: Factory bucket name

  ZoneIdParam:
    Description: ID of the availability zone
    Type: String
    Default: eu-central-1

  AccountIdParam:
    Description: ID of the AWS account
    Type: String
    Default: 781648067507

  MasterImageIdParam:
    Description: ID of the AMI to use for EC2 instances
    Type: String
    Default: ami-034c3fe427642f7f9

  NodeImageIdParam:
    Description: ID of the AMI to use for EC2 instances
    Type: String
    Default: ami-0dbb32291d7a89b1f

  MasterPrivateAddressParam:
    Description: Master private ip
    Type: String
    Default: 172.31.15.100

  SlaveNodePrivateAddressParam:
    Description: Master private ip
    Type: String
    Default: 172.31.5.64

  FactoryVpcCidrParam:
    Description: Factory cidr param
    Type: String
    Default: 172.31.0.0/16

  FactoryPublicSubnetAvailabilityZoneParam:
    Description: Factory public subnet availability zone
    Type: String
    Default: eu-central-1b

  FactoryPublicSubnetCidrParam:
    Description: Factory public subnet cidr param
    Type: String
    Default: 172.31.0.0/20

  FactoryPublicRouteCidrParam:
    Description: Factory public route cidr param
    Type: String
    Default: "0.0.0.0/0"

  KeyPairNameParam:
    Description: Factory EC2 Kubernetes cluster keypair name
    Type: String
    Default: KeyPair

  FactorySecurityGroupNameParam:
    Description: Name of the factory security group
    Type: String
    Default: FactoryGlobalSecurityGroup

  FactoryMasterVolumeId:
    Description: Id of the factory master node
    Type: String
    Default: vol-0d8aa9281cb26ce79

  FactoryNodeVolumeId:
    Description: Id of the factory node
    Type: String
    Default: vol-066b6740f06e34f7f

  MasterInstanceTypeParam:
    Description: Master instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.medium
      - t3.micro

  S3CommonsKeyParam:
    Type: String
    Default: applications/lambda/commons.zip
    Description: Commons key param

  S3FlowRateSimulatorKeyParam:
    Type: String
    Default: applications/lambda/flow_rate_simulator.zip
    Description: Gas flow rate simulator key param

  S3GasCompositionSimulatorKeyParam:
    Type: String
    Default: applications/lambda/gas_composition_simulator.zip
    Description: Gas composition key simulator param

  S3NoiseVibrationSimulatorKeyParam:
    Type: String
    Default: applications/lambda/noise_vibration_simulator.zip
    Description: Noise and vibration key simulator param

  S3PressureSimulatorKeyParam:
    Type: String
    Default: applications/lambda/pressure_simulator.zip
    Description: Pressure key simulator param

  S3TemperatureSimulatorKeyParam:
    Type: String
    Default: applications/lambda/temperature_simulator.zip
    Description: Pressure key simulator param

  S3FactoryDataSimulatorIteratorKeyParam:
    Type: String
    Default: applications/lambda/iterator.zip
    Description: Factory key param

  S3IteratorInputKeyParam:
    Type: String
    Default: applications/lambda/iterator_input.json
    Description: Factory key param

  S3FactoryDataSimulatorIteratorStateMachineKeyParam:
    Type: String
    Default: applications/step_functions/iterator_state_machine.json
    Description: Factory key param

  RegionParam:
    Description: Region of the AWS resources
    Type: String
    Default: eu-central-1

  NodeAmi:
    Description: OS image, default ubuntu 20.04
    Type: String
    Default: ami-0ab1a82de7ca5889c

  CommonNodeInitScriptParam:
    Type: String
    Default: |
      #!/bin/bash
      set -euxo pipefail
      KUBERNETES_VERSION="1.28.1-00"
      sudo swapoff -a
      (crontab -l 2>/dev/null; echo "@reboot /sbin/swapoff -a") | crontab - || true
      sudo apt-get update -y
      OS="xUbuntu_20.04"
      VERSION="1.28"

      # Create the .conf file to load the modules at bootup
      cat <<EOF | sudo tee /etc/modules-load.d/crio.conf
      overlay
      br_netfilter
      EOF

      sudo modprobe overlay
      sudo modprobe br_netfilter

      # Set up required sysctl params, these persist across reboots.
      cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF

      sudo sysctl --system

      # Install container runtime
      sudo apt-get update -y
      sudo apt install docker.io -y
      systemctl start docker
      
      cat <<EOF | sudo tee /etc/docker/daemon.json
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }
      EOF
      
      systemctl daemon-reload
      systemctl enable docker
      systemctl restart docker
      systemctl status docker

      # Install kubelet, kubectl and Kubeadm
      sudo apt-get update -y
      sudo apt-get install -y apt-transport-https ca-certificates curl
      sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://dl.k8s.io/apt/doc/apt-key.gpg

      echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      sudo apt-get update -y
      sudo apt-get install -y kubelet="$KUBERNETES_VERSION" kubectl="$KUBERNETES_VERSION" kubeadm="$KUBERNETES_VERSION"
      sudo apt-get update -y
      sudo apt-get install -y jq

      local_ip="$(ip --json addr show ens5 | jq -r '.[0].addr_info[] | select(.family == "inet") | .local')" ###
      cat > /etc/default/kubelet << EOF
      KUBELET_EXTRA_ARGS=--node-ip=$local_ip
      EOF
      
      # install python3 tools
      sudo apt install python3-pip -y
      pip3 install awscli
      pip3 install pydantic
      pip3 install boto3
      pip3 install kubernetes
      
      # pull cicd tools
      aws s3 cp s3://factory-ci-cd/applications/cicd/ ./ --recursive
  
  MasterNodeInitScriptParam:
    Type: String
    Default: |
      #!/bin/bash
      # Setup for Control Plane (Master) servers
      set -euxo pipefail
      
      NODENAME=$(hostname -s)
      POD_CIDR="10.244.0.0/16" # must be 10.244.0.0 bcs it's hardcoded in flannel .yml
      INTERFACE_NAME=ens5
      HOME=/home/ubuntu
      KUBE_CFG_DIR="$HOME"/.kube/config
      DEFAULT_USER=ubuntu
      KUBE_JOIN_TOKEN="/CICD/KUBE_JOIN_TOKEN"
      REGION="eu-central-1"
      NAMESPACE=factory
      
      # Pull required images
      sudo kubeadm config images pull
      
      # Init with private ip
      MASTER_PRIVATE_IP=$(ip addr show ${INTERFACE_NAME} | awk '/inet / {print $2}' | cut -d/ -f1)
      sudo kubeadm init --apiserver-advertise-address="$MASTER_PRIVATE_IP" --apiserver-cert-extra-sans="$MASTER_PRIVATE_IP" --pod-network-cidr="$POD_CIDR" --node-name "$NODENAME" --ignore-preflight-errors Swap
      
      # Configure kubeconfig
      mkdir -p "$HOME"/.kube
      sudo cp -i /etc/kubernetes/admin.conf ${KUBE_CFG_DIR}
      sudo chown "$(id -u)":"$(id -g)" ${KUBE_CFG_DIR}
      
      # Install Helm
      curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
      sudo apt-get install apt-transport-https --yes
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
      sudo apt-get update -y
      sudo apt-get install helm -y
      
      # Install Plugin Network 
      sudo kubectl apply -f kube/cni.yml --kubeconfig=${KUBE_CFG_DIR}
      
      # Create namespace for applications
      kubectl create namespace ${NAMESPACE} --kubeconfig=${KUBE_CFG_DIR}
      
      # Send join command to parameter store
      sudo kubeadm token create --print-join-command > tkn_cmd
      aws ssm put-parameter --name ${KUBE_JOIN_TOKEN} --value "$(cat tkn_cmd)" --type String --overwrite --region ${REGION}
      
      # Release kube config dir
      sudo chown ${DEFAULT_USER} ${KUBE_CFG_DIR}
      
      # Others
      echo "alias k='kubectl'" >> /home/ubuntu/.bashrc
      sudo apt install net-tools -y
      sudo apt install postgresql-client -y
      
      python3 functions/send_master_ready_event.py
      
      bash functions/run_deployer.sh
      
      # Wait for all nodes ready 
      python3 functions/wait_for_all_nodes_ready.py
      
      # Reset coredns
      sudo kubectl -n kube-system rollout restart deployment coredns --kubeconfig=${KUBE_CFG_DIR}

  DatabaseVolumeId:
    Description: Id of database volume
    Type: String
    Default: vol-0fa4439db2193b41a

  SlaveNodeInitScriptParam:
    Type: String
    Default: |
      #!/bin/bash
      set -euxo pipefail
      
      KUBE_JOIN_TOKEN="/CICD/KUBE_JOIN_TOKEN"
      
      # Wait for master to be ready
      python3 functions/receive_master_ready_event.py
      
      # Join to master
      aws ssm get-parameter --name ${KUBE_JOIN_TOKEN} --query "Parameter.Value" --output text --region "eu-central-1" | sudo bash

  DatabaseSlaveNodeInitScriptParam:
    Type: String
    Default: |
      #!/bin/bash
      # Invoke it after attaching gp2 to an instance
      
      DEVICE_NAME=nvme1n1
      
      # mount it
      mkdir /database
      sudo mount /dev/${DEVICE_NAME} /database
      sudo chmod 777 /database

  NodeInstanceTypeParam:
    Description: Node instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.medium
      - t3.micro

Resources:
  FlowRateSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: FlowRateSNSTopic
      FifoTopic: true
      ContentBasedDeduplication: true
    Description: Flow rate simulator

  GasCompositionSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: GasCompositionSNSTopic
      FifoTopic: true
      ContentBasedDeduplication: true
    Description: Gas composition simulator

  NoiseVibrationSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: NoiseVibrationSNSTopic
      FifoTopic: true
      ContentBasedDeduplication: true
    Description: Noise and vibration simulator

  PressureSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: PressureSNSTopic
      FifoTopic: true
      ContentBasedDeduplication: true
    Description: Pressure simulator

  TemperatureSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: TemperatureSNSTopic
      FifoTopic: true
      ContentBasedDeduplication: true
    Description: Temperature simulator

  PressureSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: PressureSQSQueue
    Description: SQS queue for pressure data

  TemperatureSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TemperatureSQSQueue
    Description: SQS queue for temperature data

  FlowRateSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: FlowRateSQSQueue
    Description: SQS queue for flow rate data

  GasCompositionSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: GasCompositionSQSQueue
    Description: SQS queue for gas composition data

  NoiseVibrationSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: NoiseVibrationSQSQueue
    Description: SQS queue for noise and vibration data

  PressureFactoryDataSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt PressureSQSQueue.Arn
      Protocol: sqs
      TopicArn: !Ref PressureSNSTopic
    Description: Subscription for PressureSQSQueue to FactoryDataSNSTopic

  TemperatureFactoryDataSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt TemperatureSQSQueue.Arn
      Protocol: sqs
      TopicArn: !Ref TemperatureSNSTopic
    Description: Subscription for TemperatureSQSQueue to FactoryDataSNSTopic

  FlowRateFactoryDataSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref FlowRateSNSTopic
      Endpoint: !GetAtt FlowRateSQSQueue.Arn
    Description: Subscription for FlowRateSQSQueue to FlowRateSNSTopic

  GasCompositionFactoryDataSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref GasCompositionSNSTopic
      Endpoint: !GetAtt GasCompositionSQSQueue.Arn
    Description: Subscription for GasCompositionSQSQueue to GasCompositionSNSTopic

  NoiseVibrationFactoryDataSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref NoiseVibrationSNSTopic
      Endpoint: !GetAtt NoiseVibrationSQSQueue.Arn
    Description: Subscription for NoiseVibrationSQSQueue to NoiseVibrationSNSTopic

  PressureSQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PressureSQSQueue
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt PressureSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref PressureSNSTopic

  TemperatureSQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TemperatureSQSQueue
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt TemperatureSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref TemperatureSNSTopic

  FlowRateSQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref FlowRateSQSQueue
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt FlowRateSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref FlowRateSNSTopic

  GasCompositionSQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref GasCompositionSQSQueue
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt GasCompositionSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref GasCompositionSNSTopic

  NoiseAndVibrationSQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref NoiseVibrationSQSQueue
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt NoiseVibrationSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref NoiseVibrationSNSTopic

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: FactoryBasicLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${RegionParam}:${AccountIdParam}:*
              - Effect: Allow
                Action: logs:CreateLogStream
                Resource: !Sub arn:aws:logs:${RegionParam}:${AccountIdParam}:log-group:/aws/lambda/*
              - Effect: Allow
                Action: logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${RegionParam}:${AccountIdParam}:log-group:/aws/lambda/*
              - Effect: Allow
                Action: sns:Publish
                Resource:
                  - !Ref FlowRateSNSTopic
                  - !Ref GasCompositionSNSTopic
                  - !Ref NoiseVibrationSNSTopic
                  - !Ref PressureSNSTopic
                  - !Ref TemperatureSNSTopic

  FlowRateSimulatorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FlowRateSimulator
      Code:
        S3Bucket: !Ref S3BucketParam
        S3Key: !Ref S3FlowRateSimulatorKeyParam
      Handler: flow_rate_simulator.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TOPIC_ARN: !Ref FlowRateSNSTopic
      Layers:
        - !Ref PowertoolsLambdaLayer
        - !Ref CommonsLambdaLayer

  GasCompositionSimulatorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GasCompositionSimulator
      Code:
        S3Bucket: !Ref S3BucketParam
        S3Key: !Ref S3GasCompositionSimulatorKeyParam
      Handler: gas_composition_simulator.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TOPIC_ARN: !Ref GasCompositionSNSTopic
      Layers:
        - !Ref PowertoolsLambdaLayer
        - !Ref CommonsLambdaLayer

  NoiseVibrationSimulatorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: NoiseVibrationSimulator
      Code:
        S3Bucket: !Ref S3BucketParam
        S3Key: !Ref S3NoiseVibrationSimulatorKeyParam
      Handler: noise_vibration_simulator.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TOPIC_ARN: !Ref NoiseVibrationSNSTopic
      Layers:
        - !Ref PowertoolsLambdaLayer
        - !Ref CommonsLambdaLayer

  PressureSimulatorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PressureSimulator
      Code:
        S3Bucket: !Ref S3BucketParam
        S3Key: !Ref S3PressureSimulatorKeyParam
      Handler: pressure_simulator.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TOPIC_ARN: !Ref PressureSNSTopic
      Layers:
        - !Ref PowertoolsLambdaLayer
        - !Ref CommonsLambdaLayer

  TemperatureSimulatorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TemperatureSimulator
      Code:
        S3Bucket: !Ref S3BucketParam
        S3Key: !Ref S3TemperatureSimulatorKeyParam
      Handler: temperature_simulator.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TOPIC_ARN: !Ref TemperatureSNSTopic
      Layers:
        - !Ref PowertoolsLambdaLayer
        - !Ref CommonsLambdaLayer

  IteratorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Iterator
      Code:
        S3Bucket: !Ref S3BucketParam
        S3Key: !Ref S3FactoryDataSimulatorIteratorKeyParam
      Handler: iterator.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketParam
          ITERATOR_INPUT: !Ref S3IteratorInputKeyParam
      Layers:
        - !Ref PowertoolsLambdaLayer
        - !Ref CommonsLambdaLayer

  PowertoolsLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: AWS Lambda Layer for aws-lambda-powertools version 2.25.1
      LayerName: aws-lambda-powertools-python-layer
      ContentUri:
        Bucket: awsserverlessrepo-changesets-1xxlnameudh3r
        Key: 781648067507/arn:aws:serverlessrepo:eu-west-1:057560766410:applications-aws-lambda-powertools-python-layer-versions-2.25.1/2808c803-98e5-4e17-a82c-80f7db4cbe0f
      CompatibleRuntimes:
        - python3.11
      LicenseInfo: Available under the Apache-2.0 license.
      RetentionPolicy: Retain
    Metadata:
      SamResourceId: LambdaLayer

  CommonsLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: CommonsLambdaLayer
      Content:
        S3Bucket: !Ref S3BucketParam
        S3Key: !Ref S3CommonsKeyParam
      CompatibleRuntimes:
        - python3.11

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StepFunctionBasicPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub ${IteratorLambdaFunction.Arn}
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub ${IteratorLambdaFunction.Arn}:*

  RepeaterStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: RepeaterStepFunction
      DefinitionSubstitutions:
        IteratorLambdaFunction: !GetAtt IteratorLambdaFunction.Arn
      DefinitionS3Location:
        Bucket: !Ref S3BucketParam
        Key: !Ref S3FactoryDataSimulatorIteratorStateMachineKeyParam
      RoleArn: !GetAtt StepFunctionRole.Arn

  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RepeaterStepFunctionExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Ref RepeaterStepFunction

  ScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: StepFunctionScheduleRule
      Description: CloudWatch Events Rule to trigger Factory Data Simulator Step Function every minute
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt RepeaterStepFunction.Arn
          Id: RepeaterStepFunction
          RoleArn: !GetAtt StepFunctionExecutionRole.Arn
          Input: "{ \"input\": {} }"

  FactoryVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref FactoryVpcCidrParam
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: FactoryVPC

  FactoryInternetGateway:
    Type: AWS::EC2::InternetGateway

  FactoryAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref FactoryVPC
      InternetGatewayId: !Ref FactoryInternetGateway

  FactoryPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref FactoryVPC
      CidrBlock: !Ref FactoryPublicSubnetCidrParam
      AvailabilityZone: !Ref FactoryPublicSubnetAvailabilityZoneParam
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  FactoryPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref FactoryVPC
      Tags:
        - Key: Name
          Value: FactoryPublicRouteTable

  FactoryPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: FactoryAttachGateway
    Properties:
      RouteTableId: !Ref FactoryPublicRouteTable
      DestinationCidrBlock: !Ref FactoryPublicRouteCidrParam
      GatewayId: !Ref FactoryInternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FactoryPublicSubnet
      RouteTableId: !Ref FactoryPublicRouteTable
  
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Ref KeyPairNameParam

  FactoryGlobalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref FactoryVPC
      GroupName: !Ref FactorySecurityGroupNameParam
      GroupDescription: Factory Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10251
          ToPort: 10251
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10257
          ToPort: 10257
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10259
          ToPort: 10259
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2379
          ToPort: 2379
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2380
          ToPort: 2380
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10250
          ToPort: 10250
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 8285
          ToPort: 8285
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 8472
          ToPort: 8472
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10252
          ToPort: 10252
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 30000
          ToPort: 32767
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 0
          ToPort: -1
          CidrIp: 0.0.0.0/0

  MasterNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MasterNodeLaunchTemplate
      VersionDescription: Initial version
      LaunchTemplateData:
        UserData:
          Fn::Base64: !Sub |
            ${CommonNodeInitScriptParam}
            ${MasterNodeInitScriptParam}
        ImageId: !Ref NodeAmi
        InstanceType: !Ref MasterInstanceTypeParam
        KeyName: !Ref KeyPair
        SecurityGroupIds:
          - !Ref FactoryGlobalSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 30
              VolumeType: gp2
              DeleteOnTermination: true

  SlaveNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: SlaveNodeLaunchTemplate
      VersionDescription: Initial version
      LaunchTemplateData:
        UserData:
          Fn::Base64: !Sub |
            ${CommonNodeInitScriptParam}
            ${SlaveNodeInitScriptParam}
            ${DatabaseSlaveNodeInitScriptParam}
        ImageId: ami-0ab1a82de7ca5889c # ubuntu 20.04
        InstanceType: !Ref MasterInstanceTypeParam
        KeyName: !Ref KeyPair
        SecurityGroupIds:
          - !Ref FactoryGlobalSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 30
              VolumeType: gp2
              DeleteOnTermination: true

  MasterNode:
    Type: AWS::EC2::Instance
    DependsOn:
      - FactoryGlobalSecurityGroup
      - MasterNodeLaunchTemplate
      - CICDSQSQueue
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MasterNodeLaunchTemplate
        Version: 1
      PrivateIpAddress: !Ref MasterPrivateAddressParam
      SubnetId: !Ref FactoryPublicSubnet
      IamInstanceProfile: !Ref NodeInstanceProfile

  SlaveNode:
    Type: AWS::EC2::Instance
    DependsOn:
      - FactoryGlobalSecurityGroup
      - SlaveNodeLaunchTemplate
      - CICDSQSQueue
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref SlaveNodeLaunchTemplate
        Version: 1
      PrivateIpAddress: !Ref SlaveNodePrivateAddressParam
      SubnetId: !Ref FactoryPublicSubnet
      IamInstanceProfile: !Ref NodeInstanceProfile

  VolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref SlaveNode
      VolumeId: !Ref DatabaseVolumeId
      Device: /dev/sdf

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: NodeInstanceProfile
      Path: /
      Roles:
        - !Ref NodeRole

  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: NodeRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: NodePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - ssm:PutParameter
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - codeartifact:GetAuthorizationToken
                  - codeartifact:ReadFromRepository
                  - sts:GetServiceBearerToken
                  - codeartifact:GetRepositoryEndpoint
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - sns:Publish
                  - sns:Subscribe
                Resource: !Sub arn:aws:sns:${ZoneIdParam}:${AccountIdParam}:*
              - Effect: "Allow"
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueUrl
                  - sqs:GetQueueAttributes
                Resource: !Sub arn:aws:sqs:${ZoneIdParam}:${AccountIdParam}:*
              - Effect: "Allow"
                Action:
                  - s3:List*
                  - s3:GetObject
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - ec2:AttachVolume
                  - ec2:CreateSnapshot
                  - ec2:CreateTags
                  - ec2:CreateVolume
                  - ec2:DeleteSnapshot
                  - ec2:DeleteTags
                  - ec2:DeleteVolume
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeInstances
                  - ec2:DescribeSnapshots
                  - ec2:DescribeTags
                  - ec2:DescribeVolumes
                  - ec2:DescribeVolumesModifications
                  - ec2:DetachVolume
                  - ec2:ModifyVolume
                Resource: "*"

  CICDSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: CICDSNSTopic
      FifoTopic: true

  CICDTopicArnSsmParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/CICD/CICDTopicArn"
      Type: String
      Value: !Ref CICDSNSTopic

  CICDSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: CICDSQSQueue

  CICDSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt CICDSQSQueue.Arn
      Protocol: sqs
      TopicArn: !Ref CICDSNSTopic

  CICDQueueArnSsmParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/CICD/CICDQueueUrl"
      Type: String
      Value: !Ref CICDSQSQueue

  CICDQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref CICDSQSQueue
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt CICDSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref CICDSNSTopic

  CodeBuildPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - logs:CreateLogStream
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutCodeCoverages
              - codebuild:BatchPutTestCases
              - codeartifact:GetAuthorizationToken
              - codeartifact:ReadFromRepository
              - codeartifact:GetRepositoryEndpoint
              - codeartifact:PutPackageMetadata
              - codeartifact:PublishPackageVersion
            Resource:
              - !Sub arn:aws:codeartifact:${ZoneIdParam}:${AccountIdParam}:repository/factory/FactoryRepository
              - !Sub arn:aws:codeartifact:${ZoneIdParam}:${AccountIdParam}:package/factory/FactoryRepository/*/*/*
              - !Sub arn:aws:codeartifact:${ZoneIdParam}:${AccountIdParam}:domain/factory
              - !Sub arn:aws:logs:${ZoneIdParam}:${AccountIdParam}:log-group:/aws/codebuild/*
              - !Sub arn:aws:codebuild:${ZoneIdParam}:${AccountIdParam}:report-group/*
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetBucketAcl
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:GetBucketLocation
              - s3:List*
              - s3:CreateBucket
              - s3:GetObjectVersion
              - sts:GetServiceBearerToken
              - ec2:CreateNetworkInterface
              - ec2:DescribeDhcpOptions
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeVpcs
              - lambda:UpdateFunctionCode
              - lambda:PublishLayerVersion
              - states:UpdateStateMachine
              - states:PublishStateMachineVersion
            Resource: '*'
          - Effect: "Allow"
            Action:
              - sns:Publish
              - sns:Subscribe
            Resource: !Sub arn:aws:sns:${ZoneIdParam}:${AccountIdParam}:*
          - Effect: "Allow"
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
              - ssm:PutParameter
            Resource: "*"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CodeBuildPolicy

  InfrastructureCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: InfrastructureCodeBuildProject
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: LAMBDAS_SOURCE_FOLDER
            Type: PLAINTEXT
            Value: lambda_functions
          - Name: BUCKET_NAME
            Type: PLAINTEXT
            Value: factory-ci-cd
          - Name: S3_LAMBDAS_DESTINATION
            Type: PLAINTEXT
            Value: applications/lambda
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: infrastructure
      Source:
        Type: GITHUB
        Location: https://github.com/MySensorFactory/FactoryInfrastructure.git
        GitCloneDepth: 1

  DatabaseCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: DatabaseCodeBuildProject
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Type: PLAINTEXT
            Value: factory-ci-cd
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: database
      Source:
        Type: GITHUB
        Location: https://github.com/MySensorFactory/database
        GitCloneDepth: 1

  KafkaCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: KafkaCodeBuildProject
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Type: PLAINTEXT
            Value: factory-ci-cd
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: kafka
      Source:
        Type: GITHUB
        Location: https://github.com/MySensorFactory/kafka
        GitCloneDepth: 1

  SqsKafkaForwarderCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: SqsKafkaForwarderCodeBuildProject
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Type: PLAINTEXT
            Value: factory-ci-cd
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: sqs-kafka-forwarder
          - Name: DOCKER_USERNAME
            Type: PARAMETER_STORE
            Value: /FactorySecrets/DOCKER_USERNAME
          - Name: DOCKER_PASSWORD
            Type: PARAMETER_STORE
            Value: /FactorySecrets/DOCKER_PASSWORD
          - Name: DOCKER_BUILD
            Type: PLAINTEXT
            Value: yes
      Source:
        Type: GITHUB
        Location: https://github.com/MySensorFactory/sqs-kafka-forwarder
        GitCloneDepth: 1

  FrontServiceCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: FrontServiceCodeBuildProject
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Type: PLAINTEXT
            Value: factory-ci-cd
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: front-service
          - Name: DOCKER_USERNAME
            Type: PARAMETER_STORE
            Value: /FactorySecrets/DOCKER_USERNAME
          - Name: DOCKER_PASSWORD
            Type: PARAMETER_STORE
            Value: /FactorySecrets/DOCKER_PASSWORD
          - Name: DOCKER_BUILD
            Type: PLAINTEXT
            Value: yes
      Source:
        Type: GITHUB
        Location: https://github.com/MySensorFactory/front-service
        GitCloneDepth: 1

  ApiStoreCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: ApiStoreCodeBuildProject
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Type: PLAINTEXT
            Value: factory-ci-cd
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: api-store
          - Name: DOCKER_BUILD
            Type: PLAINTEXT
            Value: yes
      Source:
        Type: GITHUB
        Location: https://github.com/MySensorFactory/api-store
        GitCloneDepth: 1

  KafkaDbForwarderCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: KafkaDbForwarderCodeBuildProject
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Type: PLAINTEXT
            Value: factory-ci-cd
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: kafka-db-forwarder
          - Name: DOCKER_USERNAME
            Type: PARAMETER_STORE
            Value: /FactorySecrets/DOCKER_USERNAME
          - Name: DOCKER_PASSWORD
            Type: PARAMETER_STORE
            Value: /FactorySecrets/DOCKER_PASSWORD
          - Name: DOCKER_BUILD
            Type: PLAINTEXT
            Value: yes
      Source:
        Type: GITHUB
        Location: https://github.com/MySensorFactory/kafka-db-forwarder
        GitCloneDepth: 1

  EntityStoreCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: EntityStoreCodeBuildProject
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Type: PLAINTEXT
            Value: factory-ci-cd
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: entity-store
      Source:
        Type: GITHUB
        Location: https://github.com/MySensorFactory/entity-store
        GitCloneDepth: 1

  DataServiceCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: DataServiceCodeBuildProject
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Type: PLAINTEXT
            Value: factory-ci-cd
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: data-service
          - Name: DOCKER_USERNAME
            Type: PARAMETER_STORE
            Value: /FactorySecrets/DOCKER_USERNAME
          - Name: DOCKER_PASSWORD
            Type: PARAMETER_STORE
            Value: /FactorySecrets/DOCKER_PASSWORD
          - Name: DOCKER_BUILD
            Type: PLAINTEXT
            Value: yes
      Source:
        Type: GITHUB
        Location: https://github.com/MySensorFactory/data-service
        GitCloneDepth: 1

  FactoryParentCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: FactoryParentCodeBuildProject
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Type: PLAINTEXT
            Value: factory-ci-cd
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: factory-parent
      Source:
        Type: GITHUB
        Location: https://github.com/MySensorFactory/factory-parent
        GitCloneDepth: 1

  UsersServiceCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: UsersServiceCodeBuildProject
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Type: PLAINTEXT
            Value: factory-ci-cd
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: users-service
          - Name: DOCKER_USERNAME
            Type: PARAMETER_STORE
            Value: /FactorySecrets/DOCKER_USERNAME
          - Name: DOCKER_PASSWORD
            Type: PARAMETER_STORE
            Value: /FactorySecrets/DOCKER_PASSWORD
          - Name: DOCKER_BUILD
            Type: PLAINTEXT
            Value: yes
      Source:
        Type: GITHUB
        Location: https://github.com/MySensorFactory/users-service
        GitCloneDepth: 1

  KafkaDataProcessorCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: KafkaDataProcessorCodeBuildProject
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Type: PLAINTEXT
            Value: factory-ci-cd
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: kafka-data-processor
          - Name: DOCKER_USERNAME
            Type: PARAMETER_STORE
            Value: /FactorySecrets/DOCKER_USERNAME
          - Name: DOCKER_PASSWORD
            Type: PARAMETER_STORE
            Value: /FactorySecrets/DOCKER_PASSWORD
          - Name: DOCKER_BUILD
            Type: PLAINTEXT
            Value: yes
      Source:
        Type: GITHUB
        Location: https://github.com/MySensorFactory/kafka-data-processor
        GitCloneDepth: 1

Outputs:
  MasterId:
    Description: Master ID
    Value: "MasterNode"

  NodeId:
    Description: Node ID
    Value: "Node"

  FactorySecurityGroupId:
    Description: Security Group ID of the created Factory Security Group
    Value: !Ref FactoryGlobalSecurityGroup

  KeyPairNameOutput:
    Description: Name of the EC2 Factory Key Pair used for the master and nodes
    Value: !Ref KeyPair

  FactoryVpcId:
    Description: Factory VPC ID
    Value: !Ref FactoryVPC

  FactoryDataSNSTopic:
    Description: ARN of the created SNS Topic
    Value: "FlowRateSNSTopic"

  PressureSQSQueueURL:
    Description: URL of the pressure SQS Queue
    Value: !Ref PressureSQSQueue

  TemperatureSQSQueueURL:
    Description: URL of the temperature SQS Queue
    Value: !Ref TemperatureSQSQueue

  PowertoolsLayerVersionArn:
    Description: ARN for the published Layer version
    Value: !Ref PowertoolsLambdaLayer
    Export:
      Name:
        Fn::Sub: PowertoolsLayerVersionArn-${AWS::StackName}
