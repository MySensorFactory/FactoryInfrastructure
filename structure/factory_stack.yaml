AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template to create master and node for Kubernetes cluster

Parameters:
  S3BucketParam:
    Type: String
    Default: factory-ci-cd
    Description: Factory bucket name

  ZoneIdParam:
    Description: ID of the availability zone
    Type: String
    Default: eu-central-1

  AccountIdParam:
    Description: ID of the AWS account
    Type: String
    Default: 781648067507

  MasterImageIdParam:
    Description: ID of the AMI to use for EC2 instances
    Type: String
    Default: ami-034c3fe427642f7f9

  NodeImageIdParam:
    Description: ID of the AMI to use for EC2 instances
    Type: String
    Default: ami-0dbb32291d7a89b1f

  MasterPrivateAddressParam:
    Description: Master private ip
    Type: String
    Default: 172.31.15.100

  SlaveNodePrivateAddressParam:
    Description: Master private ip
    Type: String
    Default: 172.31.5.64

  FactoryVpcCidrParam:
    Description: Factory cidr param
    Type: String
    Default: 172.31.0.0/16

  FactoryPublicSubnetAvailabilityZoneParam:
    Description: Factory public subnet availability zone
    Type: String
    Default: eu-central-1b

  FactoryPublicSubnetCidrParam:
    Description: Factory public subnet cidr param
    Type: String
    Default: 172.31.0.0/20

  FactoryPublicRouteCidrParam:
    Description: Factory public route cidr param
    Type: String
    Default: "0.0.0.0/0"

  KeyPairNameParam:
    Description: Factory EC2 Kubernetes cluster keypair name
    Type: String
    Default: FactoryKeyPair

  FactorySecurityGroupNameParam:
    Description: Name of the factory security group
    Type: String
    Default: FactoryGlobalSecurityGroup

  FactoryMasterVolumeId:
    Description: Id of the factory master node
    Type: String
    Default: vol-0d8aa9281cb26ce79

  FactoryNodeVolumeId:
    Description: Id of the factory node
    Type: String
    Default: vol-066b6740f06e34f7f

  MasterInstanceTypeParam:
    Description: Master instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.medium
      - t3.micro

  CommonNodeInitScriptParam:
    Type: String
    Default: |
      #!/bin/bash
      set -euxo pipefail
      KUBERNETES_VERSION="1.28.1-00"
      sudo swapoff -a
      (crontab -l 2>/dev/null; echo "@reboot /sbin/swapoff -a") | crontab - || true
      sudo apt-get update -y
      OS="xUbuntu_20.04"
      VERSION="1.28"

      # Create the .conf file to load the modules at bootup
      cat <<EOF | sudo tee /etc/modules-load.d/crio.conf
      overlay
      br_netfilter
      EOF

      sudo modprobe overlay
      sudo modprobe br_netfilter

      # Set up required sysctl params, these persist across reboots.
      cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF

      sudo sysctl --system

      # Install container runtime
      sudo apt-get update -y
      sudo apt install docker.io -y
      systemctl start docker
      
      cat <<EOF | sudo tee /etc/docker/daemon.json
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }
      EOF
      
      systemctl daemon-reload
      systemctl enable docker
      systemctl restart docker
      systemctl status docker

      # Install kubelet, kubectl and Kubeadm
      sudo apt-get update -y
      sudo apt-get install -y apt-transport-https ca-certificates curl
      sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://dl.k8s.io/apt/doc/apt-key.gpg

      echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      sudo apt-get update -y
      sudo apt-get install -y kubelet="$KUBERNETES_VERSION" kubectl="$KUBERNETES_VERSION" kubeadm="$KUBERNETES_VERSION"
      sudo apt-get update -y
      sudo apt-get install -y jq

      local_ip="$(ip --json addr show ens5 | jq -r '.[0].addr_info[] | select(.family == "inet") | .local')" ###
      cat > /etc/default/kubelet << EOF
      KUBELET_EXTRA_ARGS=--node-ip=$local_ip
      EOF
      
      # install python3 tools
      sudo apt install python3-pip -y
      pip3 install awscli
      pip3 install pydantic
      pip3 install boto3
      
      # pull cicd tools
      aws s3 cp s3://factory-ci-cd/applications/cicd_functions/ ./ --recursive
  
  MasterNodeInitScriptParam:
    Type: String
    Default: |
      #!/bin/bash
      # Setup for Control Plane (Master) servers
      set -euxo pipefail
      
      NODENAME=$(hostname -s)
      POD_CIDR="192.168.0.0/16"
      INTERFACE_NAME=ens5
      HOME=/home/ubuntu
      KUBE_CFG_DIR="$HOME"/.kube/config
      DEFAULT_USER=ubuntu
      KUBE_JOIN_TOKEN="/CICD/KUBE_JOIN_TOKEN"
      
      # Pull required images
      sudo kubeadm config images pull
      
      # Init with private ip
      MASTER_PRIVATE_IP=$(ip addr show ${INTERFACE_NAME} | awk '/inet / {print $2}' | cut -d/ -f1)
      sudo kubeadm init --apiserver-advertise-address="$MASTER_PRIVATE_IP" --apiserver-cert-extra-sans="$MASTER_PRIVATE_IP" --pod-network-cidr="$POD_CIDR" --node-name "$NODENAME" --ignore-preflight-errors Swap
      
      # Configure kubeconfig
      mkdir -p "$HOME"/.kube
      sudo cp -i /etc/kubernetes/admin.conf ${KUBE_CFG_DIR}
      sudo chown "$(id -u)":"$(id -g)" ${KUBE_CFG_DIR}
      
      # Install Claico Network Plugin Network 
      kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml --kubeconfig=${KUBE_CFG_DIR}
      curl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -O
      kubectl create -f custom-resources.yaml --kubeconfig=${KUBE_CFG_DIR}
      
      sudo kubeadm token create --print-join-command > tkn_cmd
      
      aws ssm put-parameter --name ${KUBE_JOIN_TOKEN} --value "$(cat tkn_cmd)" --type String --overwrite --region "eu-central-1"
      
      sudo chown ${DEFAULT_USER} ${KUBE_CFG_DIR}
      
      python3 send_master_ready_event.py

  SlaveNodeInitScriptParam:
    Type: String
    Default: |
      #!/bin/bash
      
      KUBE_JOIN_TOKEN="/CICD/KUBE_JOIN_TOKEN"
      
      # Wait for master to be ready
      python3 receive_master_ready_event.py
      
      # Join to master
      aws ssm get-parameter --name ${KUBE_JOIN_TOKEN} --query "Parameter.Value" --output text --region "eu-central-1" | sudo bash

  NodeInstanceTypeParam:
    Description: Node instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.medium
      - t3.micro

Resources:
  FactoryVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref FactoryVpcCidrParam
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: FactoryVPC

  FactoryInternetGateway:
    Type: AWS::EC2::InternetGateway

  FactoryAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref FactoryVPC
      InternetGatewayId: !Ref FactoryInternetGateway

  FactoryPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref FactoryVPC
      CidrBlock: !Ref FactoryPublicSubnetCidrParam
      AvailabilityZone: !Ref FactoryPublicSubnetAvailabilityZoneParam
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  FactoryPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref FactoryVPC
      Tags:
        - Key: Name
          Value: FactoryPublicRouteTable

  FactoryPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: FactoryAttachGateway
    Properties:
      RouteTableId: !Ref FactoryPublicRouteTable
      DestinationCidrBlock: !Ref FactoryPublicRouteCidrParam
      GatewayId: !Ref FactoryInternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FactoryPublicSubnet
      RouteTableId: !Ref FactoryPublicRouteTable
  
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: "KeyPairNameParam"

  FactoryGlobalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref FactoryVPC
      GroupName: !Ref FactorySecurityGroupNameParam
      GroupDescription: Factory Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10251
          ToPort: 10251
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2379
          ToPort: 2379
          CidrIp: 0.0.0.0/0
        #        - IpProtocol: tcp
        #          FromPort: 5555
        #          ToPort: 5555
        #          SourceSecurityGroupName: !Ref FactorySecurityGroupNameParam
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10250
          ToPort: 10250
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10252
          ToPort: 10252
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 0
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 30000
          ToPort: 32767
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 0
          ToPort: -1
          CidrIp: 0.0.0.0/0

  MasterNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MasterNodeLaunchTemplate
      VersionDescription: Initial version
      LaunchTemplateData:
        UserData:
          Fn::Base64: !Sub |
            ${CommonNodeInitScriptParam}
            ${MasterNodeInitScriptParam}
        ImageId: ami-0ab1a82de7ca5889c # ubuntu 20.04
        InstanceType: !Ref MasterInstanceTypeParam
        KeyName: !Ref KeyPair
        SecurityGroupIds:
          - !Ref FactoryGlobalSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 30
              VolumeType: gp2
              DeleteOnTermination: true

  SlaveNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: SlaveNodeLaunchTemplate
      VersionDescription: Initial version
      LaunchTemplateData:
        UserData:
          Fn::Base64: !Sub |
            ${CommonNodeInitScriptParam}
            ${SlaveNodeInitScriptParam}
        ImageId: ami-0ab1a82de7ca5889c # ubuntu 20.04
        InstanceType: !Ref MasterInstanceTypeParam
        KeyName: !Ref KeyPair
        SecurityGroupIds:
          - !Ref FactoryGlobalSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 30
              VolumeType: gp2
              DeleteOnTermination: true

  MasterNode:
    Type: AWS::EC2::Instance
    DependsOn:
      - FactoryGlobalSecurityGroup
      - MasterNodeLaunchTemplate
      - CICDSQSQueue
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MasterNodeLaunchTemplate
        Version: 1
      PrivateIpAddress: !Ref MasterPrivateAddressParam
      SubnetId: !Ref FactoryPublicSubnet
      IamInstanceProfile: !Ref NodeInstanceProfile

  SlaveNode:
    Type: AWS::EC2::Instance
    DependsOn:
      - FactoryGlobalSecurityGroup
      - SlaveNodeLaunchTemplate
      - CICDSQSQueue
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref SlaveNodeLaunchTemplate
        Version: 1
      PrivateIpAddress: !Ref SlaveNodePrivateAddressParam
      SubnetId: !Ref FactoryPublicSubnet
      IamInstanceProfile: !Ref NodeInstanceProfile

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: node-ec2-instance-profile
      Path: /
      Roles:
        - !Ref NodeRole

  NodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: NodeRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: NodePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:GetParametersByPath"
                  - "ssm:PutParameter"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                  - "sns:Subscribe"
                Resource: !Sub "arn:aws:sns:${ZoneIdParam}:${AccountIdParam}:*"
              - Effect: "Allow"
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                Resource: !Sub "arn:aws:sqs:${ZoneIdParam}:${AccountIdParam}:*"
              - Effect: "Allow"
                Action:
                  - s3:List*
                  - s3:GetObject
                Resource: "*"

  CICDSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: CICDSNSTopic
      FifoTopic: true
      ContentBasedDeduplication: true

  CICDTopicArnSsmParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/CICD/CICDTopicArn"
      Type: String
      Value: !Ref CICDSNSTopic

  CICDSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: CICDSQSQueue

  CICDSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt CICDSQSQueue.Arn
      Protocol: sqs
      TopicArn: !Ref CICDSNSTopic

  CICDQueueArnSsmParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/CICD/CICDQueueUrl"
      Type: String
      Value: !Ref CICDSQSQueue

  CICDQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref CICDSQSQueue
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt CICDSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref CICDSNSTopic

#  NodeLaunchTemplate:
#    Type: AWS::EC2::LaunchTemplate
#    Properties:
#      LaunchTemplateName: MasterNodeLaunchTemplate
#      VersionDescription: Initial version
#      LaunchTemplateData:
#        InstanceType: !Ref MasterInstanceTypeParam
#        KeyName: !Ref FactoryKeyPair
#        SecurityGroupIds:
#          - !Ref FactoryGlobalSecurityGroup
#        UserData:
#          Fn::Base64: !Ref MasterNodeInitScript
#
#  Node:
#    Type: AWS::EC2::Instance
#    DependsOn: FactoryGlobalSecurityGroup
#    Properties:
#      ImageId: !Ref NodeImageIdParam
#      InstanceType: !Ref NodeInstanceTypeParam
#      SecurityGroupIds:
#        - !Ref FactoryGlobalSecurityGroup
#      KeyName: !Ref FactoryKeyPair
#      PrivateIpAddress: !Ref NodePrivateAddressParam
#      SubnetId: !Ref FactoryPublicSubnet

#  FactoryCodeBuildPolicy:
#    Type: AWS::IAM::ManagedPolicy
#    Properties:
#      PolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Sid: VisualEditor0
#            Effect: Allow
#            Action:
#              - s3:ListBucket
#              - s3:GetBucketAcl
#              - s3:PutObject
#              - s3:GetObject
#              - s3:GetBucketLocation
#              - s3:GetObjectVersion
#              - logs:CreateLogGroup
#              - logs:PutLogEvents
#              - logs:CreateLogStream
#              - codebuild:CreateReportGroup
#              - codebuild:CreateReport
#              - codebuild:UpdateReport
#              - codebuild:BatchPutCodeCoverages
#              - codebuild:BatchPutTestCases
#              - codeartifact:GetAuthorizationToken
#              - codeartifact:ReadFromRepository
#              - codeartifact:GetRepositoryEndpoint
#              - codeartifact:PutPackageMetadata
#              - codeartifact:PublishPackageVersion
#            Resource:
#              - arn:aws:codeartifact:eu-central-1:781648067507:repository/factory/FactoryRepository
#              - arn:aws:codeartifact:eu-central-1:781648067507:package/factory/FactoryRepository/*/*/*
#              - arn:aws:codeartifact:eu-central-1:781648067507:domain/factory
#              - arn:aws:s3:::factory-ci-cd-*
#              - arn:aws:s3:::codepipeline-eu-central-1-*
#              - arn:aws:logs:eu-central-1:781648067507:log-group:/aws/codebuild/*
#              - arn:aws:codebuild:eu-central-1:781648067507:report-group/*
#          - Sid: VisualEditor1
#            Effect: Allow
#            Action:
#              - s3:PutObject
#              - s3:GetObject
#              - s3:CreateBucket
#              - s3:List*
#              - sts:GetServiceBearerToken
#              - ec2:CreateNetworkInterface
#              - ec2:DescribeDhcpOptions
#              - ec2:DescribeNetworkInterfaces
#              - ec2:DeleteNetworkInterface
#              - ec2:DescribeSubnets
#              - ec2:DescribeSecurityGroups
#              - ec2:DescribeVpcs
#            Resource: '*'
#          - Sid: VisualEditor2
#            Effect: Allow
#            Action:
#              - ssm:GetParameters
#              - ssm:GetParameter
#            Resource:
#              - arn:aws:ssm:*:781648067507:parameter/FactorySecrets/DOCKER_PASSWORD
#              - arn:aws:ssm:*:781648067507:parameter/FactorySecrets/DOCKER_USERNAME
#
#  FactoryCodeBuildRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: codebuild.amazonaws.com
#            Action: sts:AssumeRole
#      ManagedPolicyArns:
#        - !Ref FactoryCodeBuildPolicy
#
#  Demo1FactoryCodeBuildProject:
#    Type: AWS::CodeBuild::Project
#    Properties:
#      Name: Demo1FactoryBuildProject
#      ServiceRole: !GetAtt FactoryCodeBuildRole.Arn
#      Artifacts:
#        Type: NO_ARTIFACTS
#      Environment:
#        Type: LINUX_CONTAINER
#        PrivilegedMode: true
#        ComputeType: BUILD_GENERAL1_SMALL
#        Image: aws/codebuild/standard:7.0
#        EnvironmentVariables:
#          - Name: DOCKER_USERNAME
#            Type: PARAMETER_STORE
#            Value: /FactorySecrets/DOCKER_USERNAME
#          - Name: DOCKER_PASSWORD
#            Type: PARAMETER_STORE
#            Value: /FactorySecrets/DOCKER_PASSWORD
#      Source:
#        Type: GITHUB
#        Location: https://github.com/MySensorFactory/test.git
#        GitCloneDepth: 1

Outputs:
  MasterId:
    Description: Master ID
    Value: "MasterNode"

  NodeId:
    Description: Node ID
    Value: "Node"

  FactorySecurityGroupId:
    Description: Security Group ID of the created Factory Security Group
    Value: !Ref FactoryGlobalSecurityGroup

  KeyPairNameOutput:
    Description: Name of the EC2 Factory Key Pair used for the master and nodes
    Value: !Ref KeyPair

  FactoryVpcId:
    Description: Factory VPC ID
    Value: !Ref FactoryVPC

#  FactoryCodeBuildRoleId:
#    Description: Factory Code Build ID
#    Value: !Ref FactoryCodeBuildRole
#
#  FactoryCodeBuildPolicyId:
#    Description: Factory Code Build ID
#    Value: !Ref FactoryCodeBuildPolicy
